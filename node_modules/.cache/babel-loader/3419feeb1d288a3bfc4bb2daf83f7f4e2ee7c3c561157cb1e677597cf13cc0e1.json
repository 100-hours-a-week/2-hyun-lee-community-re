{"ast":null,"code":"function getBaseUrl() {\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost') {\n    return 'http://localhost:3001/api';\n  } else if (hostname === 'communityapp-env.eba-6tkf3pgq.ap-northeast-2.elasticbeanstalk.com') {\n    return 'http://communityapp-env.eba-6tkf3pgq.ap-northeast-2.elasticbeanstalk.com/api';\n  } else {\n    return 'http://52.78.32.212:3001/api';\n  }\n}\nconst BASE_URL = getBaseUrl();\nconst CDN_URL = 'https://d2m8tt5bgy55i.cloudfront.net/';\nconst S3_URL = 'https://s3.ap-northeast-2.amazonaws.com/hyun.lee.bucket/';\n\n// 사용자 인증 관련\nexport async function login(email, password) {\n  const response = await fetch(`${BASE_URL}/users/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const result = await response.json();\n  console.log(result);\n  return result;\n}\nexport async function checkEmailExists(email) {\n  try {\n    const encodedEmail = encodeURIComponent(email);\n    const response = await fetch(`${BASE_URL}/users/email/check?email=${encodedEmail}`, {\n      method: 'GET',\n      credentials: 'include'\n    });\n    return response.json();\n  } catch (error) {\n    console.error('이메일 중복 확인 중 오류 발생:', error);\n    return true;\n  }\n}\nexport async function checkNicknameExists(nickname) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/nickname/check?nickname=${nickname}`, {\n      method: 'GET',\n      credentials: 'include'\n    });\n    return response.json();\n  } catch (error) {\n    console.error('닉네임 중복 확인 중 오류 발생:', error);\n    return true;\n  }\n}\nexport async function checkNicknameExistsForUpdate(nickname, user_id) {\n  try {\n    const response = await fetch(`${BASE_URL}/users/nickname/update/check?nickname=${nickname}&user_id=${user_id}`, {\n      method: 'GET',\n      credentials: 'include'\n    });\n    return response.json();\n  } catch (error) {\n    console.error('닉네임 중복 확인 중 오류 발생:', error);\n    return true;\n  }\n}\nexport async function registerUser(formData) {\n  const response = await fetch(`${BASE_URL}/users/register`, {\n    method: 'POST',\n    body: formData,\n    credentials: 'include'\n  });\n  return response.json();\n}\nexport async function logout() {\n  const response = await fetch(`${BASE_URL}/users/logout`, {\n    method: 'GET',\n    credentials: 'include'\n  });\n  return response.json();\n}","map":{"version":3,"names":["getBaseUrl","hostname","window","location","BASE_URL","CDN_URL","S3_URL","login","email","password","response","fetch","method","headers","credentials","body","JSON","stringify","result","json","console","log","checkEmailExists","encodedEmail","encodeURIComponent","error","checkNicknameExists","nickname","checkNicknameExistsForUpdate","user_id","registerUser","formData","logout"],"sources":["/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/api/registerApi.js"],"sourcesContent":["function getBaseUrl() {\n    const hostname = window.location.hostname;\n    if (hostname === 'localhost') {\n      return 'http://localhost:3001/api'; \n    } else if (hostname === 'communityapp-env.eba-6tkf3pgq.ap-northeast-2.elasticbeanstalk.com') {\n        return 'http://communityapp-env.eba-6tkf3pgq.ap-northeast-2.elasticbeanstalk.com/api';\n      } else {\n        return 'http://52.78.32.212:3001/api'; \n      }\n  }\n  \nconst BASE_URL = getBaseUrl();\nconst CDN_URL = 'https://d2m8tt5bgy55i.cloudfront.net/';\nconst S3_URL = 'https://s3.ap-northeast-2.amazonaws.com/hyun.lee.bucket/';\n  \n\n\n\n// 사용자 인증 관련\nexport async function login(email,password){\n    const response = await fetch(`${BASE_URL}/users/login`,{\n        method:'POST',\n        headers: {\n            'Content-Type': 'application/json'  \n        },    \n        credentials: 'include',\n        body: JSON.stringify({email, password}),\n    });\n\n    const result= await response.json();\n    console.log(result);\n    return result;\n}\n\n\nexport async function checkEmailExists(email) {\n    try {\n        const encodedEmail = encodeURIComponent(email);\n        const response = await fetch(`${BASE_URL}/users/email/check?email=${encodedEmail}`,{\n            method : 'GET',\n            credentials: 'include'\n        });\n        return response.json();\n    } catch (error) {\n        console.error('이메일 중복 확인 중 오류 발생:', error);\n        return true; \n    }\n}\n\n\nexport async function checkNicknameExists(nickname) {\n    try {\n        const response = await fetch(`${BASE_URL}/users/nickname/check?nickname=${nickname}`,{\n            method: 'GET',\n            credentials: 'include'\n        });\n        return response.json();\n    } catch (error) {\n        console.error('닉네임 중복 확인 중 오류 발생:', error);\n        return true; \n    }\n}\n\nexport async function checkNicknameExistsForUpdate(nickname,user_id) {\n    try {\n        const response = await fetch(`${BASE_URL}/users/nickname/update/check?nickname=${nickname}&user_id=${user_id}`,{\n            method: 'GET',\n            credentials: 'include'\n        });\n        return response.json();\n    } catch (error) {\n        console.error('닉네임 중복 확인 중 오류 발생:', error);\n        return true; \n    }\n}\n\n\nexport async function registerUser(formData) {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include'\n    });\n    return response.json();\n}\n\nexport async function logout(){\n    const response =await fetch(`${BASE_URL}/users/logout`,{\n        method :'GET',\n        credentials: 'include'\n    });\n    return response.json();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}