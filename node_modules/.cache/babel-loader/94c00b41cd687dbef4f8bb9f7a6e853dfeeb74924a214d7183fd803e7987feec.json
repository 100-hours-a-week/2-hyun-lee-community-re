{"ast":null,"code":"var _jsxFileName = \"/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { addComment, deleteComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  comments,\n  postId,\n  setComments,\n  userId\n}) => {\n  _s();\n  const [commentContent, setCommentContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [modalContent, setModalContent] = useState({});\n  const handleAddComment = async () => {\n    if (!commentContent.trim()) {\n      alert(\"댓글 내용을 입력해주세요.\");\n      return;\n    }\n    try {\n      const newComment = await addComment(postId, commentContent);\n      setComments(prev => [...prev, newComment.comment]);\n      setCommentContent(\"\");\n    } catch (error) {\n      console.error(\"Error :\", error);\n    }\n  };\n  const handleDeleteComment = async comment_id => {\n    setModalContent({\n      title: \"댓글 삭제\",\n      message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n      onConfirm: async () => {\n        try {\n          await deleteComment(postId, comment_id);\n          setComments(prev => prev.filter(comment => comment.comment_id !== comment_id));\n          setIsModalOpen(false);\n        } catch (error) {\n          console.error(\"Error:\", error);\n        }\n      }\n    });\n    setIsModalOpen(true);\n  };\n  const handleEditComment = comment_id => {\n    const commentToEdit = comments.find(comment => comment.comment_id === comment_id);\n    if (commentToEdit) {\n      setIsEditing(true);\n      setCommentContent(commentToEdit.comment_content);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uB313\\uAE00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment_content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: formatDate(comment.create_at)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), userId === comment.user_id && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteComment(comment.comment_id),\n          children: \"\\uC0AD\\uC81C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditComment(comment.comment_id),\n          children: \"\\uC218\\uC815\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, comment.comment_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: commentContent,\n      onChange: e => setCommentContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddComment,\n      children: \"\\uB313\\uAE00 \\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: isModalOpen,\n      title: modalContent.title,\n      message: modalContent.message,\n      onConfirm: modalContent.onConfirm,\n      onCancel: () => setIsModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n};\n_s(CommentsSection, \"dgnsNr0yDMzQiT4cQfR7IC9Q6+8=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","addComment","deleteComment","formatDate","ConfirmationModal","jsxDEV","_jsxDEV","Fragment","_Fragment","CommentsSection","comments","postId","setComments","userId","_s","commentContent","setCommentContent","isModalOpen","setIsModalOpen","isEditing","setIsEditing","modalContent","setModalContent","handleAddComment","trim","alert","newComment","prev","comment","error","console","handleDeleteComment","comment_id","title","message","onConfirm","filter","handleEditComment","commentToEdit","find","comment_content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","create_at","user_id","onClick","value","onChange","e","target","show","onCancel","_c","$RefreshReg$"],"sources":["/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { addComment, deleteComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\n\nconst CommentsSection = ({ comments, postId, setComments, userId }) => {\n    const [commentContent, setCommentContent] = useState(\"\");\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [modalContent, setModalContent] = useState({});\n\n\n    const handleAddComment = async () => {\n      if (!commentContent.trim()) {\n        alert(\"댓글 내용을 입력해주세요.\");\n        return;\n      }\n  \n      try {\n        const newComment = await addComment(postId, commentContent);\n        setComments((prev) => [...prev, newComment.comment]);\n        setCommentContent(\"\");\n      } catch (error) {\n        console.error(\"Error :\", error);\n      }\n    };\n  \n\n    const handleDeleteComment = async (comment_id) => {\n        setModalContent({\n            title: \"댓글 삭제\",\n            message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n            onConfirm: async () => {\n              try {\n                await deleteComment(postId, comment_id);\n                setComments((prev) => prev.filter((comment) => comment.comment_id !== comment_id));\n                setIsModalOpen(false);\n              } catch (error) {\n                console.error(\"Error:\", error);\n              }\n            },\n          });\n          setIsModalOpen(true);\n    };\n\n    const handleEditComment = (comment_id)=>{\n        const commentToEdit = comments.find((comment)=> comment.comment_id === comment_id);\n        if(commentToEdit){\n            setIsEditing(true);\n            setCommentContent(commentToEdit.comment_content);\n        }\n\n    }\n    \n  \n    return (\n      <div className=\"comments-section\">\n        <h2>댓글</h2>\n        {comments.map((comment) => (\n          <div key={comment.comment_id} className=\"comment-item\">\n            <p>{comment.comment_content}</p>\n            <small>{formatDate(comment.create_at)}</small>\n            {userId === comment.user_id && (\n                <>\n              <button onClick={() => handleDeleteComment(comment.comment_id)}>삭제</button>\n              <button onClick={() => handleEditComment(comment.comment_id)}>수정</button>\n              </>\n            )}\n          </div>\n        ))}\n        <textarea\n          value={commentContent}\n          onChange={(e) => setCommentContent(e.target.value)}\n        />\n        <button onClick={handleAddComment}>댓글 추가</button>\n        {isModalOpen && (\n        <ConfirmationModal\n          show={isModalOpen}\n          title={modalContent.title}\n          message={modalContent.message}\n          onConfirm={modalContent.onConfirm}\n          onCancel={() => setIsModalOpen(false)}\n        />\n      )}\n      </div>\n    );\n  };\n  \n  export default CommentsSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}