{"ast":null,"code":"var _jsxFileName = \"/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { addComment, deleteComment, updateComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\nimport { Card, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  comments,\n  postId,\n  setComments,\n  userId\n}) => {\n  _s();\n  const [commentContent, setCommentContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingCommentId, setEditingCommentId] = useState(null);\n  const [modalContent, setModalContent] = useState({});\n  const handleAddComment = async () => {\n    if (!commentContent.trim()) {\n      alert(\"댓글 내용을 입력해주세요.\");\n      return;\n    }\n    try {\n      if (isEditing) {\n        const updatedComment = await updateComment(postId, editingCommentId, commentContent);\n        console.log(updatedComment);\n        setComments(prev => prev.map(comment => comment.comment_id === editingCommentId ? {\n          ...comment,\n          comment_content: updatedComment.comments[0].comment_content,\n          create_at: updatedComment.comments[0].create_at\n        } : comment));\n        setIsEditing(false);\n        setEditingCommentId(null);\n      } else {\n        const newComment = await addComment(postId, commentContent);\n        setComments(prev => [...prev, newComment.comment]);\n      }\n      setCommentContent(\"\");\n    } catch (error) {\n      console.error(\"Error :\", error);\n    }\n  };\n  const handleDeleteComment = async comment_id => {\n    setModalContent({\n      title: \"댓글 삭제\",\n      message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n      onConfirm: async () => {\n        try {\n          await deleteComment(postId, comment_id);\n          setComments(prev => prev.filter(comment => comment.comment_id !== comment_id));\n          setIsModalOpen(false);\n        } catch (error) {\n          console.error(\"Error:\", error);\n        }\n      }\n    });\n    setIsModalOpen(true);\n  };\n  const handleEditComment = comment_id => {\n    const commentToEdit = comments.find(comment => comment.comment_id === comment_id);\n    if (commentToEdit) {\n      setIsEditing(true);\n      setEditingCommentId(comment_id);\n      setCommentContent(commentToEdit.comment_content);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"comments-section my-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [comments.map(comment => /*#__PURE__*/_jsxDEV(Row, {\n        className: \"comment-item mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 10,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-1\",\n            children: comment.comment_content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"text-muted\",\n            children: formatDate(comment.create_at)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), userId === comment.user_id && /*#__PURE__*/_jsxDEV(Col, {\n          xs: 12,\n          md: 2,\n          className: \"text-end\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-primary\",\n            size: \"sm\",\n            className: \"me-2\",\n            onClick: () => handleEditComment(comment.comment_id),\n            children: \"\\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-danger\",\n            size: \"sm\",\n            onClick: () => handleDeleteComment(comment.comment_id),\n            children: \"\\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, comment.comment_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: commentContent,\n        onChange: e => setCommentContent(e.target.value),\n        placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddComment,\n        children: isEditing ? \"댓글 수정\" : \"댓글 등록\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n        show: isModalOpen,\n        title: modalContent.title,\n        message: modalContent.message,\n        onConfirm: modalContent.onConfirm,\n        onCancel: () => setIsModalOpen(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(CommentsSection, \"swZHoFF0d0C82/ig0WCrpii1RY4=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","addComment","deleteComment","updateComment","formatDate","ConfirmationModal","Card","Button","Form","Row","Col","jsxDEV","_jsxDEV","CommentsSection","comments","postId","setComments","userId","_s","commentContent","setCommentContent","isModalOpen","setIsModalOpen","isEditing","setIsEditing","editingCommentId","setEditingCommentId","modalContent","setModalContent","handleAddComment","trim","alert","updatedComment","console","log","prev","map","comment","comment_id","comment_content","create_at","newComment","error","handleDeleteComment","title","message","onConfirm","filter","handleEditComment","commentToEdit","find","className","children","Body","xs","md","fileName","_jsxFileName","lineNumber","columnNumber","user_id","variant","size","onClick","value","onChange","e","target","placeholder","show","onCancel","_c","$RefreshReg$"],"sources":["/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { addComment, deleteComment, updateComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\nimport { Card, Button, Form, Row, Col } from \"react-bootstrap\";\n\n\nconst CommentsSection = ({ comments, postId, setComments, userId }) => {\n    const [commentContent, setCommentContent] = useState(\"\");\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isEditing, setIsEditing] = useState(false);\n    const [editingCommentId, setEditingCommentId] = useState(null);\n    const [modalContent, setModalContent] = useState({});\n\n\n    const handleAddComment = async () => {\n      if (!commentContent.trim()) {\n        alert(\"댓글 내용을 입력해주세요.\");\n        return;\n      }\n  \n      try {\n        if(isEditing){\n\n            const updatedComment = await updateComment(postId,editingCommentId,commentContent);\n            console.log(updatedComment);\n            setComments((prev)=> prev.map((comment)=> comment.comment_id === editingCommentId ?  {  ...comment,\n                comment_content: updatedComment.comments[0].comment_content, \n                create_at: updatedComment.comments[0].create_at, } : comment));\n\n            setIsEditing(false);\n            setEditingCommentId(null);\n        } else{\n            const newComment = await addComment(postId, commentContent);\n            setComments((prev) => [...prev, newComment.comment]);\n        }\n        setCommentContent(\"\");\n      } catch (error) {\n        console.error(\"Error :\", error);\n      }\n    };\n  \n\n    const handleDeleteComment = async (comment_id) => {\n        setModalContent({\n            title: \"댓글 삭제\",\n            message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n            onConfirm: async () => {\n              try {\n                await deleteComment(postId, comment_id);\n                setComments((prev) => prev.filter((comment) => comment.comment_id !== comment_id));\n                setIsModalOpen(false);\n              } catch (error) {\n                console.error(\"Error:\", error);\n              }\n            },\n          });\n          setIsModalOpen(true);\n    };\n\n    const handleEditComment = (comment_id)=>{\n        const commentToEdit = comments.find((comment)=> comment.comment_id === comment_id);\n        if(commentToEdit){\n            setIsEditing(true);\n            setEditingCommentId(comment_id);\n            setCommentContent(commentToEdit.comment_content);\n        }\n\n    }\n    \n  \n    return (\n        <Card className=\"comments-section my-4\">\n            <Card.Body>\n            {comments.map((comment) => (\n          <Row key={comment.comment_id} className=\"comment-item mb-3\">\n            <Col xs={12} md={10}>\n              <p className=\"mb-1\">{comment.comment_content}</p>\n              <small className=\"text-muted\">{formatDate(comment.create_at)}</small>\n            </Col>\n            {userId === comment.user_id && (\n              <Col xs={12} md={2} className=\"text-end\">\n                <Button\n                  variant=\"outline-primary\"\n                  size=\"sm\"\n                  className=\"me-2\"\n                  onClick={() => handleEditComment(comment.comment_id)}\n                >\n                  수정\n                </Button>\n                <Button\n                  variant=\"outline-danger\"\n                  size=\"sm\"\n                  onClick={() => handleDeleteComment(comment.comment_id)}\n                >\n                  삭제\n                </Button>\n              </Col>\n            )}\n          </Row>\n        ))}\n        <textarea\n          value={commentContent}\n          onChange={(e) => setCommentContent(e.target.value)}\n          placeholder=\"댓글을 입력하세요\"\n        />\n        <button onClick={handleAddComment}>{isEditing ? \"댓글 수정\" : \"댓글 등록\"}</button>\n        {isModalOpen && (\n        <ConfirmationModal\n          show={isModalOpen}\n          title={modalContent.title}\n          message={modalContent.message}\n          onConfirm={modalContent.onConfirm}\n          onCancel={() => setIsModalOpen(false)}\n        />\n      )}\n        </Card.Body>\n      </Card>\n    );\n  };\n  \n  export default CommentsSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}