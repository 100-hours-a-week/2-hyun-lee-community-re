{"ast":null,"code":"var _jsxFileName = \"/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { addComment, deleteComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentsSection = ({\n  comments,\n  postId,\n  setComments,\n  userId\n}) => {\n  _s();\n  const [commentContent, setCommentContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalContent, setModalContent] = useState({});\n  const handleAddComment = async () => {\n    if (!commentContent.trim()) {\n      alert(\"댓글 내용을 입력해주세요.\");\n      return;\n    }\n    try {\n      const newComment = await addComment(postId, commentContent);\n      setComments(prev => [...prev, newComment.comment]);\n      setCommentContent(\"\");\n    } catch (error) {\n      console.error(\"Error :\", error);\n    }\n  };\n  const handleDeleteComment = async comment_id => {\n    setModalContent({\n      title: \"댓글 삭제\",\n      message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n      onConfirm: async () => {\n        try {\n          await deleteComment(postId, comment_id);\n          setComments(prev => prev.filter(comment => comment.comment_id !== comment_id));\n          setIsModalOpen(false);\n        } catch (error) {\n          console.error(\"Error:\", error);\n        }\n      }\n    });\n    setIsModalOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uB313\\uAE00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.comment_content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: formatDate(comment.create_at)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), userId === comment.user_id && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeleteComment(comment.comment_id),\n        children: \"\\uC0AD\\uC81C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this)]\n    }, comment.comment_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: commentContent,\n      onChange: e => setCommentContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddComment,\n      children: \"\\uB313\\uAE00 \\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: isModalOpen,\n      title: modalContent.title,\n      message: modalContent.message,\n      onConfirm: modalContent.onConfirm,\n      onCancel: () => setIsModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n};\n_s(CommentsSection, \"egWlg48vl7E7zv2I11UqCR9il2Y=\");\n_c = CommentsSection;\nexport default CommentsSection;\nvar _c;\n$RefreshReg$(_c, \"CommentsSection\");","map":{"version":3,"names":["React","useState","addComment","deleteComment","formatDate","ConfirmationModal","jsxDEV","_jsxDEV","CommentsSection","comments","postId","setComments","userId","_s","commentContent","setCommentContent","isModalOpen","setIsModalOpen","modalContent","setModalContent","handleAddComment","trim","alert","newComment","prev","comment","error","console","handleDeleteComment","comment_id","title","message","onConfirm","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","comment_content","create_at","user_id","onClick","value","onChange","e","target","show","onCancel","_c","$RefreshReg$"],"sources":["/Users/ijuhyeon/Documents/community/2-hyun-lee-community-re/my-react-app/src/components/CommentsSection.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { addComment, deleteComment } from \"../api/postApi\";\nimport { formatDate } from \"../utils/formatDate\";\nimport ConfirmationModal from \"./ConfirmationModal\";\n\nconst CommentsSection = ({ comments, postId, setComments, userId }) => {\n    const [commentContent, setCommentContent] = useState(\"\");\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [modalContent, setModalContent] = useState({});\n\n\n    const handleAddComment = async () => {\n      if (!commentContent.trim()) {\n        alert(\"댓글 내용을 입력해주세요.\");\n        return;\n      }\n  \n      try {\n        const newComment = await addComment(postId, commentContent);\n        setComments((prev) => [...prev, newComment.comment]);\n        setCommentContent(\"\");\n      } catch (error) {\n        console.error(\"Error :\", error);\n      }\n    };\n  \n\n    const handleDeleteComment = async (comment_id) => {\n        setModalContent({\n            title: \"댓글 삭제\",\n            message: \"댓글을 삭제하시겠습니까? 복구할 수 없습니다.\",\n            onConfirm: async () => {\n              try {\n                await deleteComment(postId, comment_id);\n                setComments((prev) => prev.filter((comment) => comment.comment_id !== comment_id));\n                setIsModalOpen(false);\n              } catch (error) {\n                console.error(\"Error:\", error);\n              }\n            },\n          });\n          setIsModalOpen(true);\n    };\n    \n  \n    return (\n      <div className=\"comments-section\">\n        <h2>댓글</h2>\n        {comments.map((comment) => (\n          <div key={comment.comment_id} className=\"comment-item\">\n            <p>{comment.comment_content}</p>\n            <small>{formatDate(comment.create_at)}</small>\n            {userId === comment.user_id && (\n              <button onClick={() => handleDeleteComment(comment.comment_id)}>삭제</button>\n            )}\n          </div>\n        ))}\n        <textarea\n          value={commentContent}\n          onChange={(e) => setCommentContent(e.target.value)}\n        />\n        <button onClick={handleAddComment}>댓글 추가</button>\n        {isModalOpen && (\n        <ConfirmationModal\n          show={isModalOpen}\n          title={modalContent.title}\n          message={modalContent.message}\n          onConfirm={modalContent.onConfirm}\n          onCancel={() => setIsModalOpen(false)}\n        />\n      )}\n      </div>\n    );\n  };\n  \n  export default CommentsSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}